// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRADEEVENT_AERON_UDP_H_
#define FLATBUFFERS_GENERATED_TRADEEVENT_AERON_UDP_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace aeron_udp {

struct TradeEvent;
struct TradeEventBuilder;

struct TradeEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TradeEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTRUMENT = 4,
    VT_BASE_CURRENCY = 6,
    VT_QUOTE_CURRENCY = 8,
    VT_TIMESTAMP = 10,
    VT_TRADE_ID = 12,
    VT_QUANTITY = 14,
    VT_PRICE = 16,
    VT_VALUE = 18,
    VT_TRADER_LONG = 20,
    VT_TRADER_SHORT = 22,
    VT_ORD_ID_LONG = 24,
    VT_ORD_ID_SHORT = 26,
    VT_MAKER = 28,
    VT_TAKER = 30,
    VT_MARKET = 32,
    VT_LEVERAGE_LONG = 34,
    VT_LEVERAGE_SHORT = 36
  };
  const ::flatbuffers::String *instrument() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT);
  }
  const ::flatbuffers::String *base_currency() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BASE_CURRENCY);
  }
  const ::flatbuffers::String *quote_currency() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QUOTE_CURRENCY);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  const ::flatbuffers::String *trade_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRADE_ID);
  }
  uint64_t quantity() const {
    return GetField<uint64_t>(VT_QUANTITY, 0);
  }
  const ::flatbuffers::String *price() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRICE);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  const ::flatbuffers::String *trader_long() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRADER_LONG);
  }
  const ::flatbuffers::String *trader_short() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRADER_SHORT);
  }
  const ::flatbuffers::String *ord_id_long() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORD_ID_LONG);
  }
  const ::flatbuffers::String *ord_id_short() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORD_ID_SHORT);
  }
  const ::flatbuffers::String *maker() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MAKER);
  }
  const ::flatbuffers::String *taker() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAKER);
  }
  const ::flatbuffers::String *market() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MARKET);
  }
  uint32_t leverage_long() const {
    return GetField<uint32_t>(VT_LEVERAGE_LONG, 0);
  }
  uint32_t leverage_short() const {
    return GetField<uint32_t>(VT_LEVERAGE_SHORT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTRUMENT) &&
           verifier.VerifyString(instrument()) &&
           VerifyOffset(verifier, VT_BASE_CURRENCY) &&
           verifier.VerifyString(base_currency()) &&
           VerifyOffset(verifier, VT_QUOTE_CURRENCY) &&
           verifier.VerifyString(quote_currency()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyOffset(verifier, VT_TRADE_ID) &&
           verifier.VerifyString(trade_id()) &&
           VerifyField<uint64_t>(verifier, VT_QUANTITY, 8) &&
           VerifyOffset(verifier, VT_PRICE) &&
           verifier.VerifyString(price()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           VerifyOffset(verifier, VT_TRADER_LONG) &&
           verifier.VerifyString(trader_long()) &&
           VerifyOffset(verifier, VT_TRADER_SHORT) &&
           verifier.VerifyString(trader_short()) &&
           VerifyOffset(verifier, VT_ORD_ID_LONG) &&
           verifier.VerifyString(ord_id_long()) &&
           VerifyOffset(verifier, VT_ORD_ID_SHORT) &&
           verifier.VerifyString(ord_id_short()) &&
           VerifyOffset(verifier, VT_MAKER) &&
           verifier.VerifyString(maker()) &&
           VerifyOffset(verifier, VT_TAKER) &&
           verifier.VerifyString(taker()) &&
           VerifyOffset(verifier, VT_MARKET) &&
           verifier.VerifyString(market()) &&
           VerifyField<uint32_t>(verifier, VT_LEVERAGE_LONG, 4) &&
           VerifyField<uint32_t>(verifier, VT_LEVERAGE_SHORT, 4) &&
           verifier.EndTable();
  }
};

struct TradeEventBuilder {
  typedef TradeEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_instrument(::flatbuffers::Offset<::flatbuffers::String> instrument) {
    fbb_.AddOffset(TradeEvent::VT_INSTRUMENT, instrument);
  }
  void add_base_currency(::flatbuffers::Offset<::flatbuffers::String> base_currency) {
    fbb_.AddOffset(TradeEvent::VT_BASE_CURRENCY, base_currency);
  }
  void add_quote_currency(::flatbuffers::Offset<::flatbuffers::String> quote_currency) {
    fbb_.AddOffset(TradeEvent::VT_QUOTE_CURRENCY, quote_currency);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(TradeEvent::VT_TIMESTAMP, timestamp, 0);
  }
  void add_trade_id(::flatbuffers::Offset<::flatbuffers::String> trade_id) {
    fbb_.AddOffset(TradeEvent::VT_TRADE_ID, trade_id);
  }
  void add_quantity(uint64_t quantity) {
    fbb_.AddElement<uint64_t>(TradeEvent::VT_QUANTITY, quantity, 0);
  }
  void add_price(::flatbuffers::Offset<::flatbuffers::String> price) {
    fbb_.AddOffset(TradeEvent::VT_PRICE, price);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(TradeEvent::VT_VALUE, value);
  }
  void add_trader_long(::flatbuffers::Offset<::flatbuffers::String> trader_long) {
    fbb_.AddOffset(TradeEvent::VT_TRADER_LONG, trader_long);
  }
  void add_trader_short(::flatbuffers::Offset<::flatbuffers::String> trader_short) {
    fbb_.AddOffset(TradeEvent::VT_TRADER_SHORT, trader_short);
  }
  void add_ord_id_long(::flatbuffers::Offset<::flatbuffers::String> ord_id_long) {
    fbb_.AddOffset(TradeEvent::VT_ORD_ID_LONG, ord_id_long);
  }
  void add_ord_id_short(::flatbuffers::Offset<::flatbuffers::String> ord_id_short) {
    fbb_.AddOffset(TradeEvent::VT_ORD_ID_SHORT, ord_id_short);
  }
  void add_maker(::flatbuffers::Offset<::flatbuffers::String> maker) {
    fbb_.AddOffset(TradeEvent::VT_MAKER, maker);
  }
  void add_taker(::flatbuffers::Offset<::flatbuffers::String> taker) {
    fbb_.AddOffset(TradeEvent::VT_TAKER, taker);
  }
  void add_market(::flatbuffers::Offset<::flatbuffers::String> market) {
    fbb_.AddOffset(TradeEvent::VT_MARKET, market);
  }
  void add_leverage_long(uint32_t leverage_long) {
    fbb_.AddElement<uint32_t>(TradeEvent::VT_LEVERAGE_LONG, leverage_long, 0);
  }
  void add_leverage_short(uint32_t leverage_short) {
    fbb_.AddElement<uint32_t>(TradeEvent::VT_LEVERAGE_SHORT, leverage_short, 0);
  }
  explicit TradeEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TradeEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TradeEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TradeEvent> CreateTradeEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> instrument = 0,
    ::flatbuffers::Offset<::flatbuffers::String> base_currency = 0,
    ::flatbuffers::Offset<::flatbuffers::String> quote_currency = 0,
    uint64_t timestamp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trade_id = 0,
    uint64_t quantity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> price = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trader_long = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trader_short = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ord_id_long = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ord_id_short = 0,
    ::flatbuffers::Offset<::flatbuffers::String> maker = 0,
    ::flatbuffers::Offset<::flatbuffers::String> taker = 0,
    ::flatbuffers::Offset<::flatbuffers::String> market = 0,
    uint32_t leverage_long = 0,
    uint32_t leverage_short = 0) {
  TradeEventBuilder builder_(_fbb);
  builder_.add_quantity(quantity);
  builder_.add_timestamp(timestamp);
  builder_.add_leverage_short(leverage_short);
  builder_.add_leverage_long(leverage_long);
  builder_.add_market(market);
  builder_.add_taker(taker);
  builder_.add_maker(maker);
  builder_.add_ord_id_short(ord_id_short);
  builder_.add_ord_id_long(ord_id_long);
  builder_.add_trader_short(trader_short);
  builder_.add_trader_long(trader_long);
  builder_.add_value(value);
  builder_.add_price(price);
  builder_.add_trade_id(trade_id);
  builder_.add_quote_currency(quote_currency);
  builder_.add_base_currency(base_currency);
  builder_.add_instrument(instrument);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TradeEvent> CreateTradeEventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *instrument = nullptr,
    const char *base_currency = nullptr,
    const char *quote_currency = nullptr,
    uint64_t timestamp = 0,
    const char *trade_id = nullptr,
    uint64_t quantity = 0,
    const char *price = nullptr,
    const char *value = nullptr,
    const char *trader_long = nullptr,
    const char *trader_short = nullptr,
    const char *ord_id_long = nullptr,
    const char *ord_id_short = nullptr,
    const char *maker = nullptr,
    const char *taker = nullptr,
    const char *market = nullptr,
    uint32_t leverage_long = 0,
    uint32_t leverage_short = 0) {
  auto instrument__ = instrument ? _fbb.CreateString(instrument) : 0;
  auto base_currency__ = base_currency ? _fbb.CreateString(base_currency) : 0;
  auto quote_currency__ = quote_currency ? _fbb.CreateString(quote_currency) : 0;
  auto trade_id__ = trade_id ? _fbb.CreateString(trade_id) : 0;
  auto price__ = price ? _fbb.CreateString(price) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  auto trader_long__ = trader_long ? _fbb.CreateString(trader_long) : 0;
  auto trader_short__ = trader_short ? _fbb.CreateString(trader_short) : 0;
  auto ord_id_long__ = ord_id_long ? _fbb.CreateString(ord_id_long) : 0;
  auto ord_id_short__ = ord_id_short ? _fbb.CreateString(ord_id_short) : 0;
  auto maker__ = maker ? _fbb.CreateString(maker) : 0;
  auto taker__ = taker ? _fbb.CreateString(taker) : 0;
  auto market__ = market ? _fbb.CreateString(market) : 0;
  return aeron_udp::CreateTradeEvent(
      _fbb,
      instrument__,
      base_currency__,
      quote_currency__,
      timestamp,
      trade_id__,
      quantity,
      price__,
      value__,
      trader_long__,
      trader_short__,
      ord_id_long__,
      ord_id_short__,
      maker__,
      taker__,
      market__,
      leverage_long,
      leverage_short);
}

inline const aeron_udp::TradeEvent *GetTradeEvent(const void *buf) {
  return ::flatbuffers::GetRoot<aeron_udp::TradeEvent>(buf);
}

inline const aeron_udp::TradeEvent *GetSizePrefixedTradeEvent(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<aeron_udp::TradeEvent>(buf);
}

inline bool VerifyTradeEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<aeron_udp::TradeEvent>(nullptr);
}

inline bool VerifySizePrefixedTradeEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<aeron_udp::TradeEvent>(nullptr);
}

inline void FinishTradeEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aeron_udp::TradeEvent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTradeEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aeron_udp::TradeEvent> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace aeron_udp

#endif  // FLATBUFFERS_GENERATED_TRADEEVENT_AERON_UDP_H_
